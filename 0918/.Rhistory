t(B)%*%t(A)
2/sqrt(29)
BA <- B%*%A
BA
eigen(BA)
1/sqrt(170)
BAT <- t(A)%*%t(B)
BAT
1:2
s=0
for i in (1:40){
s= s+1/i
}
s
?for
}
?in
?assign
s=0
for i in 1:40{
s= s+1/i
}
s
geometric distribution
s=0
for i in 1:40{
s= s+1/i
}
s
s=0
for (i in 1:40){
s= s+1/i
}
s
?predict
library(randomforest)
install.packages("randomForest")
?cforest
library(randomForest)
?cforest
?randomForest
?cFOrest
?cforest
?randomforest
library(randomForest)
?cforest
??cforest
x<- rand(10)
x<- runif(10)
y <- runif(10)
z <- runif(10)
model <- randomForest(x~y,z, importance = TRUE, proximity = TRUE)
dataset <- data.frame(x=x,y=y,z=z)
model <- randomForest(x~.,data = dataset, importance = TRUE, proximity = TRUE)
print(model)
model2 <- cforest(x~.,data = dataset, importance = TRUE, proximity = TRUE)
library(splines)
?bs
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
ml <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
with(ml, table(ses,prog))
with(ml,do.call(rbind,tapply(write,rog,function(x) c(M=mean(x),SD=sd(x)))))
with(ml,do.call(rbind,tapply(write,prog,function(x) c(M=mean(x),SD=sd(x)))))
head(ml)
ml$prog2 <- relevel(ml$prog, ref = "academic")
ml$prog2[1;10]
ml$prog2[1:10]
test <- multinom(prog2~ses+write, data = ml)
summary(test)
z <- summary(test)$coefficients/summary(test)$standard.errors
z
p <- (1-pnorm(abs(x),0,1))*2
p
library(splines)
t = 0:48
mod.knots = c(0, 6, 12, 18, 24, 30, 36, 42)
Xbs = bs(t, knots=mod.knots, Boundary.knots=c(0,48), degree = 3, intercept=F)
dim(Xbs)
plot(t, Xbs[,1], type="l", ylab="basis fn value", xlab="t")
for(i in 2:dim(Xbs)[2]) lines(t, Xbs[,i], col=i)
x = c(1,2,3)
y = c(6,5,4)
cor(x,y)
x <- matrix(c(12, 5, 7, 7), nc = 2)
x
chisq.test(x)
x <- matrix(c(12, 0, 0, 7), nc = 2)
X
x
chisq.test(x)
x <- c(1,1,1,2,2,2,3,3,3,4)
y = c(1,2,3,4)
p <- c(1/3,1/3,2/9,1/9)
chisq.text(x,y,p)
chisq.test(x,y,p)
x
p = rep(1/length(x), length(x))
p
x <- c(3,3,3,1)
y
p
p <- c(1/3,1/3,2/9,1/9)
hisq.test(x,y,p)
chisq.test(x,y,p)
x <- c(1,1,3,10)
chisq.test(x,y,p)
x
y
p
chisq.test(x,p)
chisq.test(x,p=c(0,0.5,0.1,0.3))
chisq.test(x,p=c(0,0.5,0.1,0.4))
title: "Stat20 0823"
---
2=3
Save the .pkg file, double-click it to open, and follow the installation instructions.
install.packages("rmarkdown")
install.packages("rmarkdown")
* Prof. Stoyanov's Lectures: TuTh 9:30-11 AM, 2050 Valley Life Sciences Bldg
?ggplot2
library(ggplot2)
?ggplot2
library("ggplot2")
?ggplot2
View(diamonds)
head(diamonds)
plot(diamonds$clarity, diamonds$price)
plot(diamonds$depth, diamonds$price)
data("midwest", package = "ggplot2")
ggplot(midwest, aes(x=area, y=poptotal))
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
head(midwest)
?head
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_line()
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
data("midwest", package = "ggplot2")#load the data
head(midwest)#return the first part of data
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point()
install.packages("tidyverse")
install.packages("tidyverse")
?rnorm
rep(1,10)
n <- 100
epsilon <- rnorm(n)
x0 <- rep(1,n)
x1 <- rnorm(n) + 3
X <- c(x0, x1)
X <- matrix(c(x0,x1), nrow = n, ncol = 2, bycol = TRUE)
X <- matrix(c(x0,x1), nrow = n, ncol = 2)
head(X)
y <- X*beta + epsilon
y <- X%*%beta + epsilon
beta <- matrix(c(0.5,2),2,1)
y <- X%*%beta + epsilon
n <- 10000
epsilon <- rnorm(n)
beta <- matrix(c(0.5,2),2,1)
x0 <- rep(1,n)
x1 <- rnorm(n) + 3
X <- matrix(c(x0,x1), nrow = n, ncol = 2)
y <- X%*%beta + epsilon
n0 <- 100
betahatsum <- 0
simu <- 100
for (i in 1:simutime){
index <- sample(1:n, n0)
Xsimu <- X[index,]
ysimu <- y[index,]
betasimu <- inv(t(Xsimu)%*%Xsimu)%*%t(Xsimu)%*%y
betahatsum <- betahatsum + betasimu
}
simutime <- 100
for (i in 1:simutime){
index <- sample(1:n, n0)
Xsimu <- X[index,]
ysimu <- y[index,]
betasimu <- inv(t(Xsimu)%*%Xsimu)%*%t(Xsimu)%*%y
betahatsum <- betahatsum + betasimu
}
n <- 10000
epsilon <- rnorm(n)
beta <- matrix(c(0.5,2),2,1)
x0 <- rep(1,n)
x1 <- rnorm(n) + 3
X <- matrix(c(x0,x1), nrow = n, ncol = 2)
y <- X%*%beta + epsilon
n0 <- 100
betahatsum <- 0
simutime <- 100
for (i in 1:simutime){
index <- sample(1:n, n0)
Xsimu <- X[index,]
ysimu <- y[index,]
betasimu <- solve(t(Xsimu)%*%Xsimu, t(Xsimu)%*%ysimu)
betahatsum <- betahatsum + betasimu
}
betahatsum
betasum/simutime
betahasum/simutime
betahatsum/simutime
?c
y <- matrix(c(1,2,3,4), nrow = 2)
y
z <- matrix(c(1,0,1,0), nrow = 2)
z
y%*%z
#summary statistics
data <- c(1,3,5,-1,4,0,100)
mean(data)
var(data)
??
mean
#use R as a calculator
2+3
1000-1
3*4
64/16
64*2.54/100
h <- 64*2.54/100
h <- 64*2.54/100
h
6^2
10^6 - 2^6*3
sqrt(64)
x <- c(1,2,3)#c: combine values into a vector or list
x
x + 3
x + c(0,4)
x
x*3
#create a matrix
y <- matrix(c(1,2,3,4), nrow = 2)
y
z <- matrix(c(1,0,1,0), nrow = 2)
z
y*z
y%*%z#matrix multiplication
#summary statistics
data <- c(1,3,5,-1,4,0,100)
mean(data)
var(data)
min(data)
max(data)
#how to look for help in R:
?mean
#use R as a calculator
2+3
1000-1
3*4
64/16
6^2
64*2.54/100
h <- 64*2.54/100
h
sqrt(64)
x <- c(1,2,3)#c: combine values into a vector or list
x
x + 3
x*3
#create a matrix
y <- matrix(c(1,2,3,4), nrow = 2)
y
z <- matrix(c(1,0,1,0), nrow = 2)
y*z
z
y%*%z#matrix multiplication
#summary statistics
data <- c(1,3,5,-1,4,0,100)
mean(data)
var(data)
min(data)
max(data)
#how to look for help in R:
?mean
?sample
x <- 1:10
y <- -4:0
x + y
berk.temp <- c(68, 73, 71, 74, 73, 73, 73, 74, 72)
length(berk.temp)
mean(berk.temp)
berk.temp.c <- (berk.temp-32)/1.8
sample(berk.temp, size = 4)
sample(berk.temp, size = , replace = TRUE)
sample(six_sided, size = 1)
six_sided <- 1:6
sample(six_sided, size = 1)
sample(six_sided, size = 1) + sample(six_sided, size = 1)
sample(six_sided, size = 1) + sample(six_sided, size = 1)
res = ""
c(res,0)
res = None
c(res,0)
res
c(res1,100)
res <- Null
for (i in 1:10){
sample(c(0,1))
}
for (i in 1:10){
print sample(c(0,1))
}
for (i in 1:10){
print sample(c(0,1), size = 1)
}
for (i in 1:10){
print sample(c(0,1), size = 1)
}
six_sided <- 1:6
sample(six_sided, size = 1)
sample(six_sided, size = 1) + sample(six_sided, size = 1)
for (i in 1:10){
print sample(c(0,1), size = 1, replace = TRUE)
}
for (i in (1:10)){
print sample(c(0,1), size = 1, replace = TRUE)
}
sample(c(0,1), size = 1, replace = TRUE)
for (i in (1:10)){
sample(c(0,1), size = 1, replace = TRUE)
}
for (i in (1:10)){
print(sample(c(0,1), size = 1, replace = TRUE))
}
sample(c(0,1), size = 10, replace = TRUE)
sum(sample(c(0,1), size = 10, replace = TRUE))
sum(sample(c(0,1), size = 100, replace = TRUE))
x <- 1:10
x
y <- -4:0
y
z <- c(1,0,-4,5)
z
x + y
berk.temp <- c(68, 73, 71, 74, 73, 73, 73, 74, 72)
length(berk.temp)
mean(berk.temp)
berk.temp.c <- (berk.temp-32)/1.8
berk.temp.c
sample(berk.temp, size = 4)
sample(berk.temp, size = , replace = TRUE)
sample(berk.temp, size = 4, replace = TRUE)
six_sided <- 1:6
sample(six_sided, size = 1)
sample(six_sided, size = 1)
sample(six_sided, size = 1)
sample(six_sided, size = 1)
sample(six_sided, size = 1)
sample(six_sided, size = 1)
sample(six_sided, size = 1)
sample(six_sided, size = 1) + sample(six_sided, size = 1)
tickets <- c(1,3,5,15,27)
sample(six_sided, size = 1) + sample(six_sided, size = 1)
sample(six_sided, size = 1) + sample(six_sided, size = 1)
sample(six_sided, size = 1) + sample(six_sided, size = 1)
sample(c(0,1), size = 10, replace = TRUE)
sample(c(0,1), size = 10, replace = TRUE)
sample(c(0,1), size = 10, replace = TRUE)
=
sum(sample(c(0,1), size = 10, replace = TRUE))
sum(sample(c(0,1), size = 10, replace = TRUE))
sum(sample(c(0,1), size = 100, replace = TRUE))
sum(sample(c(0,1), size = 100, replace = TRUE))
x <- c(1,23,4)
length(x)
1:n/2
1:10/2
n <- 5
1:n/2
sample(3)
sample(3)
sample(3)
sample(3)
sample(x>7)
x
x <- 1:10
sample(x>7)
?data.frame
a <- list()
a[1]=12
a
a[1]
a[1]a
a
a[2]=1
a[2] + 3
?list
a <- list(12,3)
a
a[1]
a[[1]]
a[[1]]-4
a[1] + a[2]
c(a[1] ,a[2])
a <- list(1,2,3)
b <- list('a','b','c')
c <- data.frame(a,b)
c
view (c)
View(c)
?dataframe
c <- data.frame()
c
c$f.hat <- a
c$a <- c(2,3,4)
a
b
c
c <- data.frame(a = a, b = b)
c
c <- data.frame(A = a, B = b)
c
is.list(a)
is.list(b)
c <- data.frame(A = c("a","b","c","d","e"), B = c(rep(0.05,3), rep(0.5,2)))
c
c <- data.frame(A = a, B = b)
c
View(c)
c <- data.frame(A = unlist(a), B = unlist(b))
c
install.packages("viridis")
install.packages("shiny")
install.packages("shiny")
library(shiny)
ui <- basicPage(
plotOutput("plot1", click = "plot_click"),
verbatimTextOutput("info")
)
server <- function(input, output) {
output$plot1 <- renderPlot({
plot(mtcars$wt, mtcars$mpg)
})
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)
})
}
shinyApp(ui, server)
mtcar$wt
mtcars$wt
?shinyApp
library(shiny)
library(ggplot2)
ui <- fluidPage(
fluidRow(
column(6,
plotOutput("plot1", click = "plot1_click")
),
column(5,
br(), br(), br(),
htmlOutput("x_value"),
verbatimTextOutput("selected_rows")
))
)
server <- function(input, output) {
output$plot1 <- renderPlot({
plot(ToothGrowth$supp, ToothGrowth$len)
})
# Print the name of the x value
output$x_value <- renderText({
if (is.null(input$plot1_click$x)) return("")
else {
lvls <- levels(ToothGrowth$supp)
name <- lvls[round(input$plot1_click$x)]
HTML("You've selected <code>", name, "</code>",
"<br><br>Here are the first 10 rows that ",
"match that category:")
}
})
# Print the rows of the data frame which match the x value
output$selected_rows <- renderPrint({
if (is.null(input$plot1_click$x)) return()
else {
keeprows <- round(input$plot1_click$x) == as.numeric(ToothGrowth$supp)
head(ToothGrowth[keeprows, ], 10)
}
})
}
shinyApp(ui, server)
setwd("D:/Berkeley/GSI/Stat20-fall-2018/0830")
library(dplyr)
#family.csv
family <- read.csv("family.csv")
median(select(family,height))
x <- select(family,height)
x
median(x)
median(list(x)
)
median(family$height)
setwd("D:/Berkeley/GSI/Stat20-fall-2018/0919")
library(dplyr)
#family.csv
family <- read.csv("family.csv")
#a, problem with data, overWt is not a logical variable
select(filter(family, overWt == "False"), age)
#b
select(filter(family, sex == "f"), weight)
setwd("D:/Berkeley/GSI/Stat20-fall-2018/0919")
#family.csv
family <- read.csv("family.csv")
#a, problem with data, overWt is not a logical variable
select(filter(family, overWt == "False"), age)
arrange(USArrests, desc(Assault))
?sort
